<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="xyz.fusheng.exam.mapper.QuestionMapper">
  <resultMap id="BaseResultMap" type="xyz.fusheng.model.entity.Question">
    <!--@mbg.generated-->
    <!--@Table ex_question-->
    <id column="question_id" jdbcType="BIGINT" property="questionId" />
    <result column="question_content" jdbcType="VARCHAR" property="questionContent" />
    <result column="question_image" jdbcType="VARCHAR" property="questionImage" />
    <result column="question_video" jdbcType="VARCHAR" property="questionVideo" />
    <result column="question_code" jdbcType="VARCHAR" property="questionCode" />
    <result column="question_type" jdbcType="TINYINT" property="questionType" />
    <result column="question_tag" jdbcType="TINYINT" property="questionTag" />
    <result column="analysis" jdbcType="VARCHAR" property="analysis" />
    <result column="state" jdbcType="BOOLEAN" property="state" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="memo" jdbcType="VARCHAR" property="memo" />
    <result column="version" jdbcType="INTEGER" property="version" />
    <result column="is_enabled" jdbcType="BOOLEAN" property="isEnabled" />
    <result column="is_deleted" jdbcType="BOOLEAN" property="isDeleted" />
    <result column="creator_id" jdbcType="BIGINT" property="creatorId" />
    <result column="updater_id" jdbcType="BIGINT" property="updaterId" />
    <result column="creator_name" jdbcType="VARCHAR" property="creatorName" />
    <result column="updater_name" jdbcType="VARCHAR" property="updaterName" />
    <result column="created_time" jdbcType="TIMESTAMP" property="createdTime" />
    <result column="updated_time" jdbcType="TIMESTAMP" property="updatedTime" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    question_id, question_content, question_image, question_video, question_code, question_type,
    question_tag, analysis, `state`, remark, memo, version, is_enabled, is_deleted,
    creator_id, updater_id, creator_name, updater_name, created_time, updated_time
  </sql>

  <select id="getRepositoryIdsByQuestionId" resultType="java.lang.Long">
    select repository_id from ex_repository_question where question_id = #{questionId}
  </select>

  <select id="getByPage" resultType="xyz.fusheng.model.vo.QuestionVo">
    select q.*, rq.repository_id as repositoryId, r.repository_name as repositoryName
    from ex_question q left join ex_repository_question rq on q.question_id = rq.question_id
                       left join ex_repository r on rq.repository_id = r.repository_id
    where q.is_deleted = 0
    <if test="params.questionContent != null and params.questionContent != ''">
        and q.question_content like concat(#{params.questionContent}, '%')
    </if>
    <if test="params.repositoryId != null">
        and rq.repository_id = #{params.repositoryId}
    </if>
    <if test="params.questionTypeId != null">
        and q.question_type_id = #{params.questionTypeId}
    </if>
    <if test="params.questionTagId != null">
        and q.question_tag_id = #{params.questionTagId}
    </if>
    <if test="params.creatorName != null">
        and q.creator_name like concat(#{params.creatorName}, '%')
    </if>
    <if test="params.isEnabled != null">
        and q.is_enabled = #{params.isEnabled}
    </if>
    <if test="params.questionTime != null">
        and q.created_time between #{params.questionTime[0], jdbcType=TIMESTAMP} and #{params.questionTime[1], jdbcType=TIMESTAMP}
    </if>
    <if test="sortColumn !=null and sortColumn != ''">
        order by ${sortColumn} ${sortMethod}
    </if>
    limit #{index}, #{pageSize}
  </select>

  <select id="getCountByPage" resultType="java.lang.Integer">
    select count(*)
    from ex_question q left join ex_repository_question rq on q.question_id = rq.question_id
                       left join ex_repository r on rq.repository_id = r.repository_id
    where q.is_deleted = 0
    <if test="params.questionContent != null and params.questionContent != ''">
        and q.question_content like concat(#{params.questionContent}, '%')
    </if>
    <if test="params.repositoryId != null">
        and rq.repository_id = #{params.repositoryId}
    </if>
    <if test="params.questionTypeId != null">
        and q.question_type_id = #{params.questionTypeId}
    </if>
    <if test="params.questionTagId != null">
        and q.question_tag_id = #{params.questionTagId}
    </if>
    <if test="params.creatorName != null">
        and q.creator_name like concat(#{params.creatorName}, '%')
    </if>
    <if test="params.isEnabled != null">
        and q.is_enabled = #{params.isEnabled}
    </if>
    <if test="params.questionTime != null">
        and q.created_time between #{params.questionTime[0], jdbcType=TIMESTAMP} and #{params.questionTime[1], jdbcType=TIMESTAMP}
    </if>
  </select>

  <!-- 获取试题视图对象(包含题库名称) -->
  <select id="getQuestionVoById" resultType="xyz.fusheng.model.vo.QuestionVo">
    select q.*, rq.repository_id as repositoryId, r.repository_name as repositoryName
    from ex_question q left join ex_repository_question rq on q.question_id = rq.question_id
                       left join ex_repository r on rq.repository_id = r.repository_id
    where q.is_deleted = 0 and q.question_id = #{questionId}
  </select>

  <select id="getSimpleQuestionByPage" resultType="xyz.fusheng.model.vo.QuestionVo">
    select q.question_id, q.question_content, q.question_image, q.question_video, q.question_code, q.question_type, q.question_tag,
    pq.question_sort as questionSort, pq.question_score as questionScore
    from ex_question q right join ex_paper_question pq on q.question_id = pq.question_id
    where q.is_deleted = 0
    <if test="params.paperId != null">
        and pq.paper_id = #{params.paperId}
    </if>
    <if test="sortColumn !=null and sortColumn != ''">
        order by ${sortColumn} ${sortMethod}
    </if>
    limit #{index}, #{pageSize}
  </select>

  <select id="getSimpleCountByPage" resultType="int">
    select count(*) from ex_paper_question where paper_id = #{params.paperId}
  </select>

</mapper>
